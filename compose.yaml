version: '3.3'

services:
  user-service:
    build:
      context: ./Backend/microservices-eda/UserService/
      dockerfile: Dockerfile.dev
    container_name: user-service-container
    ports:
      - "8002:8002"
    depends_on:
      - kong
    networks:
      - kong-network

  product_producer:
    build:
      context: ./Backend/microservices-eda/ProductService/producer
      dockerfile: Dockerfile_producer.dev
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/microservices-eda/ProductService/producer:/Backend/microservices-eda/ProductService/producer
    depends_on:
      - broker
      - kong
    networks:
      - kong-network

  product_consumer:
    build:
      context: ./Backend/microservices-eda/ProductService/consumer
      dockerfile: Dockerfile_consumer.dev
    ports:
      - "8001:8001"
    volumes:
      - ./Backend/microservices-eda/ProductService/consumer:/Backend/microservices-eda/ProductService/consumer
    depends_on:
      - postgres_db
      - broker
      - kong
    networks:
      - kong-network

  postgres_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: PostgresCont1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: postgres
    ports:
      - '5433:5432'
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - kong-network

  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker1
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - kong-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui1
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
    networks:
      - kong-network

  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5434:5432"
    networks:
      - kong-network

  kong-migrations:
    image: kong:3.4.0
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
    networks:
      - kong-network

  kong:
    image: kong:3.4.0
    container_name: kong
    depends_on:
      - kong-database
      - kong-migrations
      - user-service
      - product_producer
      - product_consumer
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - kong-network

volumes:
  postgres_db:
    driver: local

networks:
  kong-network:
    driver: bridge





























# version: '3.3'

# services:
#   user-service:
#     build:
#       context: ./Backend/microservices-eda/UserService/
#       dockerfile: Dockerfile.dev
#     container_name: user-service-container
#     ports:
#       - "8002:8002"
#   product_producer:
#     build:
#       context: ./Backend/microservices-eda/ProductService/producer
#       dockerfile: Dockerfile_producer.dev
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./Backend/microservices-eda/ProductService/producer:/Backend/microservices-eda/ProductService/producer
#     depends_on:
#       - broker

#   product_consumer:
#     build:
#       context: ./Backend/microservices-eda/ProductService/consumer
#       dockerfile: Dockerfile_consumer.dev
#     ports:
#       - "8001:8001"
#     volumes:
#       - ./Backend/microservices-eda/ProductService/consumer:/Backend/microservices-eda/ProductService/consumer
#     depends_on:
#       - postgres_db
#       - broker
#   postgres_db:
#     image: postgres:latest  # Use the official PostgreSQL image
#     restart: always
#     container_name: PostgresCont1
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: 123456
#       POSTGRES_DB: postgres
#     ports:
#       - '5433:5432'
#     volumes:
#       - postgres_db:/var/lib/postgresql/data

#   broker:
#     image: apache/kafka:3.7.0
#     hostname: broker
#     container_name: broker1
#     ports:
#       - '9092:9092'
#     environment:
#       KAFKA_NODE_ID: 1
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
#       KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
#       KAFKA_PROCESS_ROLES: 'broker,controller'
#       KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
#       KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
#       KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
#       KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
#       CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#       KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#       KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#       KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#       KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

#   kafka-ui:
#     image: provectuslabs/kafka-ui
#     container_name: kafka-ui1
#     ports:
#       - "8080:8080"
#     environment:
#       KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
#       KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
#       DYNAMIC_CONFIG_ENABLED: "true"
#     depends_on:
#       - broker

# volumes:
#   postgres_db:
#     driver: local

# networks:
#   default:
#     driver: bridge


